<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Crisp Catcher Game</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>Crisp Catcher Game</h1>
  <canvas id="gameCanvas" width="900" height="600"></canvas>
  <audio id="catchAudio" src="catch.mp3" preload="auto"></audio>
  <audio id="missAudio" src="miss.mp3" preload="auto"></audio>
  <audio id="bgmAudio" src="bgm.mp3" preload="auto" loop></audio>
  <script src="game.js"></script>
</body>
</html> 


const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const WIDTH = canvas.width;
const HEIGHT = canvas.height;

// Player (man) properties
const player = {
  x: WIDTH / 2,
  y: HEIGHT - 120, // moved up to show legs
  width: 60,
  height: 60,
  speed: 5
};

// Crisp properties
const crisps = [];
const CRISP_RADIUS = 12;
const CRISP_FALL_SPEED = 2.25; // 25% slower than 3
const GRAVITY = 0.135; // 25% slower than 0.18
const BOUNCE = 0.4;

// Controls
let leftPressed = false;
let rightPressed = false;

let score = 0;
let gameOver = false;
let timeLeft = 30; // seconds
let timerInterval = null;
let biteTimer = 0;
let walkCycle = 0;

// Audio
const catchSound = new Audio('catch.mp3');
const missSound = new Audio('miss.mp3');
const bgm = new Audio('bgm.mp3');
bgm.loop = true;
let bgmStarted = false;
const whooshSound = new Audio('whoosh.mp3');
const crunchSounds = [new Audio('crunch1.mp3'), new Audio('crunch2.mp3'), new Audio('yum.mp3')];

// Images
const manImg = new Image();
manImg.src = 'man.png';
const manMouthOpenImg = new Image();
manMouthOpenImg.src = 'man-mouth-open.png';
const crispImg = new Image();
crispImg.src = 'crisp.png';

document.addEventListener('keydown', (e) => {
  if (e.key === 'ArrowLeft') leftPressed = true;
  if (e.key === 'ArrowRight') rightPressed = true;
  if (gameOver && e.code === 'Space') restartGame();
});
document.addEventListener('keyup', (e) => {
  if (e.key === 'ArrowLeft') leftPressed = false;
  if (e.key === 'ArrowRight') rightPressed = false;
});

function startTimer() {
  if (timerInterval) clearInterval(timerInterval);
  timeLeft = 30;
  timerInterval = setInterval(() => {
    timeLeft--;
    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      gameOver = true;
      bgm.pause();
      bgm.currentTime = 0;
      bgmStarted = false;
    }
  }, 1000);
}

function drawBackground() {
  // Gradient sky
  let skyGradient = ctx.createLinearGradient(0, 0, 0, HEIGHT);
  skyGradient.addColorStop(0, '#87ceeb');
  skyGradient.addColorStop(1, '#b3e0ff');
  ctx.fillStyle = skyGradient;
  ctx.fillRect(0, 0, WIDTH, HEIGHT);
  // Sun
  ctx.beginPath();
  ctx.arc(WIDTH - 70, 70, 40, 0, 2 * Math.PI);
  ctx.fillStyle = '#fff700';
  ctx.globalAlpha = 0.7;
  ctx.fill();
  ctx.globalAlpha = 1;
  // Clouds
  drawCloud(100, 80, 30);
  drawCloud(200, 50, 20);
  drawCloud(400, 90, 25);
  // Hills
  ctx.fillStyle = '#4caf50';
  ctx.beginPath();
  ctx.arc(150, HEIGHT, 200, Math.PI, 2 * Math.PI);
  ctx.arc(450, HEIGHT, 200, Math.PI, 2 * Math.PI);
  ctx.fill();
}

function drawCloud(x, y, r) {
  ctx.save();
  ctx.globalAlpha = 0.6;
  ctx.fillStyle = '#fff';
  ctx.beginPath();
  ctx.arc(x, y, r, 0, 2 * Math.PI);
  ctx.arc(x + r, y + 5, r * 0.7, 0, 2 * Math.PI);
  ctx.arc(x - r, y + 8, r * 0.6, 0, 2 * Math.PI);
  ctx.fill();
  ctx.globalAlpha = 1;
  ctx.restore();
}

function isCrispNearMouth() {
  return crisps.some(crisp =>
    crisp.y + CRISP_RADIUS > player.y + 5 &&
    crisp.y - CRISP_RADIUS < player.y + 20 &&
    Math.abs(crisp.x - player.x) < 25
  );
}

function drawPlayer() {
  // Legs (animated, drawn first)
  let legYStart = player.y + 60;
  let legLength = 40;
  let legSwing = Math.sin(walkCycle) * 14;
  ctx.strokeStyle = '#2d5c2f';
  ctx.lineWidth = 8;
  ctx.lineCap = 'round';
  // Left leg
  ctx.beginPath();
  ctx.moveTo(player.x - 10, legYStart);
  ctx.lineTo(player.x - 10 + legSwing, legYStart + legLength);
  ctx.stroke();
  // Left foot
  ctx.beginPath();
  ctx.moveTo(player.x - 10 + legSwing, legYStart + legLength);
  ctx.lineTo(player.x - 10 + legSwing + 10, legYStart + legLength);
  ctx.stroke();
  // Right leg
  ctx.beginPath();
  ctx.moveTo(player.x + 10, legYStart);
  ctx.lineTo(player.x + 10 - legSwing, legYStart + legLength);
  ctx.stroke();
  // Right foot
  ctx.beginPath();
  ctx.moveTo(player.x + 10 - legSwing, legYStart + legLength);
  ctx.lineTo(player.x + 10 - legSwing - 10, legYStart + legLength);
  ctx.stroke();
  // Arms (animated, drawn before body)
  let armYStart = player.y + 30;
  let armLength = 38;
  let armSwing = Math.sin(walkCycle + Math.PI) * 16; // opposite to legs
  ctx.strokeStyle = '#fcd7b6';
  ctx.lineWidth = 7;
  ctx.lineCap = 'round';
  // Left arm
  ctx.beginPath();
  ctx.moveTo(player.x - 18, armYStart);
  ctx.lineTo(player.x - 18 + armSwing, armYStart + armLength);
  ctx.stroke();
  // Right arm
  ctx.beginPath();
  ctx.moveTo(player.x + 18, armYStart);
  ctx.lineTo(player.x + 18 - armSwing, armYStart + armLength);
  ctx.stroke();
  ctx.lineCap = 'butt';
  // Torso (body)
  ctx.fillStyle = '#2d5c2f';
  ctx.fillRect(player.x - 15, player.y + 25, 30, 35);
  // Head
  ctx.fillStyle = '#fcd7b6';
  ctx.beginPath();
  ctx.arc(player.x, player.y, 25, 0, 2 * Math.PI);
  ctx.fill();
  // Subtle face shading
  let faceGradient = ctx.createRadialGradient(player.x, player.y, 10, player.x, player.y, 25);
  faceGradient.addColorStop(0, 'rgba(255,255,255,0)');
  faceGradient.addColorStop(1, 'rgba(0,0,0,0.08)');
  ctx.fillStyle = faceGradient;
  ctx.beginPath();
  ctx.arc(player.x, player.y + 7, 20, 0, 2 * Math.PI);
  ctx.fill();
  // Draw ears
  ctx.fillStyle = '#fcd7b6';
  ctx.beginPath();
  ctx.arc(player.x - 22, player.y + 2, 6, 0, 2 * Math.PI);
  ctx.arc(player.x + 22, player.y + 2, 6, 0, 2 * Math.PI);
  ctx.fill();
  ctx.strokeStyle = '#e0b080';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.arc(player.x - 22, player.y + 2, 6, Math.PI * 0.2, Math.PI * 1.8);
  ctx.arc(player.x + 22, player.y + 2, 6, Math.PI * 1.2, Math.PI * 0.8, true);
  ctx.stroke();
  // Draw blonde curly hair (more curls)
  ctx.strokeStyle = '#ffd700';
  ctx.lineWidth = 4;
  for (let i = 0; i < 14; i++) {
    let angle = Math.PI * (i / 13) + (Math.random() - 0.5) * 0.15;
    let cx = player.x + Math.cos(angle) * 22;
    let cy = player.y - 22 + Math.sin(angle) * 8;
    ctx.beginPath();
    ctx.arc(cx, cy, 7, 0, 2 * Math.PI);
    ctx.stroke();
  }
  // Draw eyes
  ctx.fillStyle = '#222';
  ctx.beginPath();
  ctx.arc(player.x - 8, player.y - 5, 3, 0, 2 * Math.PI);
  ctx.arc(player.x + 8, player.y - 5, 3, 0, 2 * Math.PI);
  ctx.fill();
  // Draw nose
  ctx.strokeStyle = '#e0b080';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(player.x, player.y - 2);
  ctx.lineTo(player.x, player.y + 8);
  ctx.stroke();
  // Mouth (open by default, closes briefly for bite)
  ctx.strokeStyle = '#a0522d';
  ctx.lineWidth = 4;
  ctx.beginPath();
  if (biteTimer > 0) {
    ctx.arc(player.x, player.y + 10, 8, 0, Math.PI, false); // closed mouth (smaller arc)
  } else {
    ctx.arc(player.x, player.y + 10, 14, 0, Math.PI, false); // open mouth (wider arc)
  }
  ctx.stroke();
  // Smile line under mouth
  ctx.strokeStyle = 'rgba(160,82,45,0.5)';
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.arc(player.x, player.y + 18, 10, 0, Math.PI, false);
  ctx.stroke();
}

function drawCrisps() {
  crisps.forEach(crisp => {
    // Draw shadow
    ctx.save();
    ctx.globalAlpha = 0.3;
    ctx.fillStyle = '#444';
    ctx.beginPath();
    ctx.ellipse(crisp.x, Math.min(crisp.y + CRISP_RADIUS + 8, HEIGHT - 2), CRISP_RADIUS, CRISP_RADIUS / 3, 0, 0, 2 * Math.PI);
    ctx.fill();
    ctx.restore();
    // Draw crisp with rotation
    ctx.save();
    ctx.translate(crisp.x, crisp.y);
    ctx.rotate(crisp.rotation);
    if (crispImg.complete && crispImg.naturalWidth > 0) {
      ctx.drawImage(crispImg, -CRISP_RADIUS, -CRISP_RADIUS, CRISP_RADIUS * 2, CRISP_RADIUS * 2);
    } else {
      ctx.fillStyle = '#ffe066';
      ctx.beginPath();
      ctx.ellipse(0, 0, CRISP_RADIUS, CRISP_RADIUS / 2, Math.PI / 6, 0, 2 * Math.PI);
      ctx.fill();
    }
    ctx.restore();
  });
}

function drawHUD() {
  ctx.fillStyle = '#2d5c2f';
  ctx.font = '20px Arial';
  ctx.fillText('Score: ' + score, 20, 30);
  ctx.fillText('Time: ' + timeLeft + 's', WIDTH - 120, 30);
}

function playCatchSound() {
  catchSound.currentTime = 0;
  catchSound.play();
}
function playMissSound() {
  missSound.currentTime = 0;
  missSound.play();
}
function startBGM() {
  if (!bgmStarted) {
    bgm.play();
    bgmStarted = true;
  }
}

function playCrunchSound() {
  const sound = crunchSounds[Math.floor(Math.random() * crunchSounds.length)];
  sound.currentTime = 0;
  sound.play();
}

function checkCatch() {
  for (let i = crisps.length - 1; i >= 0; i--) {
    const crisp = crisps[i];
    if (
      crisp.y + CRISP_RADIUS > player.y + 5 &&
      crisp.y - CRISP_RADIUS < player.y + 20 &&
      Math.abs(crisp.x - player.x) < 25
    ) {
      crisps.splice(i, 1);
      score++;
      playCatchSound();
      playCrunchSound();
      biteTimer = 12; // ~0.2 seconds at 60fps
    }
  }
}

function updatePlayer() {
  let moved = false;
  if (leftPressed && player.x - player.width / 2 > 0) {
    player.x -= player.speed;
    moved = true;
  }
  if (rightPressed && player.x + player.width / 2 < WIDTH) {
    player.x += player.speed;
    moved = true;
  }
  if (moved) {
    walkCycle += 0.18;
  }
}

function updateCrisps() {
  crisps.forEach(crisp => {
    if (!crisp.caught) {
      crisp.vy += GRAVITY;
      crisp.y += crisp.vy;
      crisp.rotation += crisp.rotationSpeed;
      // Bounce if hit ground
      if (crisp.y > HEIGHT - CRISP_RADIUS) {
        crisp.y = HEIGHT - CRISP_RADIUS;
        crisp.vy = -crisp.vy * BOUNCE;
        if (Math.abs(crisp.vy) < 1) crisp.vy = 0;
      }
    }
  });
  for (let i = crisps.length - 1; i >= 0; i--) {
    if (crisps[i].y > HEIGHT + CRISP_RADIUS * 2) {
      crisps.splice(i, 1);
    }
  }
}

function spawnCrisp() {
  if (Math.random() < 0.02) { // 2% chance per frame
    crisps.push({
      x: Math.random() * (WIDTH - 2 * CRISP_RADIUS) + CRISP_RADIUS,
      y: -CRISP_RADIUS,
      vy: CRISP_FALL_SPEED + Math.random() * 1.125,
      rotation: Math.random() * Math.PI * 2,
      rotationSpeed: (Math.random() - 0.5) * 0.1,
      caught: false
    });
    whooshSound.currentTime = 0;
    whooshSound.play();
  }
}

function drawGameOver() {
  ctx.fillStyle = 'rgba(0,0,0,0.5)';
  ctx.fillRect(0, 0, WIDTH, HEIGHT);
  ctx.fillStyle = '#fff';
  ctx.font = '40px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('Time Up!', WIDTH / 2, HEIGHT / 2 - 20);
  ctx.font = '24px Arial';
  ctx.fillText('Final Score: ' + score, WIDTH / 2, HEIGHT / 2 + 20);
  ctx.fillText('Press Space to Restart', WIDTH / 2, HEIGHT / 2 + 60);
  ctx.textAlign = 'start';
}

function restartGame() {
  score = 0;
  crisps.length = 0;
  gameOver = false;
  timeLeft = 30;
  startBGM();
  startTimer();
  gameLoop(); // Restart the animation loop
}

function gameLoop() {
  startBGM();
  drawBackground();
  if (!gameOver) {
    updatePlayer();
    updateCrisps();
    spawnCrisp();
    checkCatch();
    drawCrisps();
    drawPlayer();
    drawHUD();
    if (biteTimer > 0) biteTimer--;
    requestAnimationFrame(gameLoop);
  } else {
    drawCrisps();
    drawPlayer();
    drawHUD();
    drawGameOver();
  }
}

// Start the game
startTimer();
gameLoop(); 

body {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #b3e0ff;
  margin: 0;
  font-family: sans-serif;
  min-height: 100vh;
  justify-content: flex-start;
}

h1 {
  margin-top: 20px;
  color: #2d5c2f;
}

#gameCanvas {
  border: 2px solid #2d5c2f;
  background: #87ceeb;
  margin-top: 20px;
  display: block;
} 
